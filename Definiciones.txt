Expresividad: El codigo se puede leer y entender lo que se esta haciendo. (no hace falta comentarios si el codigo se lee en si). Es subjetivo, que sea entendible.
Declaratividad: Se delega lo que quiero con como quiero. Se separa la parte algoritmica con lo que. Se delego la lagoritmica al motor.
Acoplamiento: 2 componentes de mi programa pueden depender en mayor o menor medida uno del otro, cuanto conoce un elementod el otro para ser usado, me importa el tipo de cosas que recibe, pero no importa como lo hace (>acomplamiento significa: < acomplamiento significa: )Queremso minimizar el grado de las cosas que dependen de otras. Preferimos que haya la mayor catidad de pedazos delegando las partes de la funcion, si se hacen modificaciones se maximiza la cantidad de "nosevaenterar el resto de codigo" 
Composicion: Forma de armar una funcion nueva que equivale a una secuencia de funciones. Crear una nueva funcion a partir de crear nuevas funciones. El dominio de la segunda es parte de la imagen de la primera, formando nuevas funciones.
Transparencia referencial: Si tengo f de un valor siempre esta asociado al mismo valor siempre se mantiene el valor resultante. Si yo ejetuto algo me da siempre lo mismo (consecuencia porque no tengo efecto colateral)
Efecto colateral: Cambio que hago dentrod e una funcion y luego se ve reflejado luego que la funcion termina. el cambio sobrevive a la evaluacion del codigo. Puedo afectar el contexto donde estan ocurriendo las cosas.
Aplicacion Parcial: Pasarle a una funcion menos parametros para poder generar una nueva funcion que espera todo lo que lo que le falta. La sintaxis de HK nos permite pasar alguno de los parametros, y me queda una nueva funcion que recibe el que le falta a la nueva funcion.
Evaluacion diferida: solo se evalua si hace, falta. Esta escrita pero no forma parte de mi respuesta (no se evsalua). / Solo lo suficiente es lo que se evalua, si no se utiliza algo no se evalua directamente. Puedo dividir por 0 si no se evalua.
Pattern Matchin: Tener una definicion en partes y dependiendo de la forma que tiene los parametros podemos definir una funcion aplicable a la lista vacia en una definicion. depende de que parametro le estoy pasando. es un caso en el cual me restrinjo con algo.) Genero un patron y lo matchea con otro. Al evaluar cierto parametro en mi definicion puedo hacer que coincida con unsa osla definicio, si tiene sentido elvalor que le paso con el otro valor.
Imperatividad: lo contrario a lo declarativo.
Reduccion: la funcion es cada vez mas basica, mas chica etc.
bajo para que se mantengan los componentes de forma independiente.
-Guardas: Permiten dar distintas definiciones de una funcion bajo distintas condiciones. (asociado a uncion x ramas) es lo mismo que una funcion por partes.
-Recursividad: Es una funcion que se define en funcion de si misma. (las listas son recursivas, es una funcion definida en si misma) pero que tiene un caso base
    Ej: siguiente = (1 + )
Estructuras de datos: 
-Listas: Siempre del mismo tipo de dato, no sepueden tener cosas distintas.
-tuplas: numero finito de dato sque pueden terner distinto tipo. 
-Type: dar un nombre de datos para que sea de un mismo tipo y que sea mas expresivo y darle seria una estructura.
-Data: Definir una estructura de un tipo de dato con el nombre que nosotros quetremos con datos internos
-Multiples constructores: 
-Record sintax: Mas expresividad y 1) funciones que me permiten acceder a estructura y acceder directamente 2) Permite c"cambiar" de forma virtual creando un nuevo data con la misma informacion excepto el cambio hecho.
/Una unica vez es lo que se evalua, se relaciona con transparencia referencial. Se evalua auna sola vez y siempre se que tengo el mismo resultado.
Parametro vs argumento
Parametro formal, es el que pongo en una funcion: esta recibe un valor en eun momento pero no lo conozco. entocne slas definicion tiene un PF. Cuando yo la evaluo le paso un argunmento, le paso un valoerr que es el que toma un 
Parametro real: es el valor que le estoy mandando, entonces el pattern matching revisa esa coincidencia para que funcionen las cosas.
cohesion: funcion que hace muchas cosas en la misma, sabe la condicion que tiene que aplicar y la aplica a todo lo demas
funcion de orden superior: Son funciones que trabajan confunciones, se aplica mas para los que reciben que para que las envian. Funciones que funcionan con un valor son las que trabajan con valores. El punto es una fucion de prden superior