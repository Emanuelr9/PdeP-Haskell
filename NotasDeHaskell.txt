Hola! Aca voy a poner todo lo que voy aprendiendo de haskell. 
La idea es que a medida que vaya avanzando voy poniendo lo que voy aprendiendo en diferentes carpetas. 
Para eso dependiendo de la clase voy a estar creando carpetas nuevas de lo que voy haciendo segun sea conveniente (si encuentro algun criterio de agrega aca al titulo)

Haskell funciona mediante a lo que yo le voy escribiendo en la consola. por ejemplo:

-- (comentarios en Haskell)
{--Comentarios extendidos--}

Para hacer que funcione en la consola hay que ir a la carpeta donde esta el archivo de 
haskell (con cd \nombreDeLaCarpeta\), despues ejecutar el comando ghci para que entre 
a prelude y despues poner :load nombreDelArchivo. (opcion 2 ghci nombreDelArchivo.hs)

Recordar que una vez hayan habido cambios hay que hacer el comando :r para actualizar en la consola despues de haberlo grabado.

Referencias de lo que voy escribiendo:
 /-\ Funciones o conocimiento nuevo 
[] tipo de dato 

Comandos del ghci:
:r - Actualiza los cambios que hice en el archivo.
:t - Muestra el tipo de todo lo que le ponga despues de un espacio. 
:e - Me abre el archivo como un txt para guardarlo

Funciones de Haskell sacadas de mumuki/clase: (hacer un archivo de mumuki si hace falta afianzar nuevos temas)
    
    import Text.Show.Functions Tiene que estar para que mande el mensaje funcion cuando el resultado es una funcion

    
    /length\ nos dice el largo de un string;
    /head\ nos devuelve el primer caracter (la primer letra) de un string;
    /++\ nos permite concatenar (unir) strings y es infija (como todos los chirimbolos que vimos).
    /elem\ nos dice si una letra (o cualquier caracter) forma parte de una palabra. 
    /mod\ Devuelve el resto de una division Modulo 2.11
        --Sacadas del modulo 3--
    /!!\ Devuelve el elemento que esta en la posicion buscada de una lista: !! buscado.
    /drop\ descarta los primeros n elementos de una lista. drop 2 [1,2,3] => [3] 
    /elem\ busca el elemento en una lista y devuelve booleano si esta en ella elem 1 [1,2,3] => true
    /++\ concatena "String1" ++ "String2" = 'String1String2'
    /concat\ Hace lo mismo que ++ concatena listas[[1,2,3],[4,5,6]]
    /maximum\ me dice el valor mas grande de una lista maximum [1,5,2,3] => 5
    /take\ toma los primeros valores de la lsta dada take 2 [1,2,3,4,5] => [1,2]
    
    /even\ modulo 2.5
    /rem\ devuelve el resto
    /any\
    /all\
    /map\
    /and\
    /or\
    [1..] Lo que hace es generar una lista de valores desde el 1 hasta el infinito Ej: filter esPrimo [1..] esta funcion me busca todos los N primos desde 1 en adelante.

00 - Mumuki

    01 - Valores Y Funciones

        -- Ejercicio 14 --
        
        maximoEntreTres: toma tres mediciones y nos da la más alta;
        minimoEntreTres: toma tres mediciones y nos da la mas baja;
        dispersion: toma los tres mediciones y devuelve la diferencia entre la más alta y la más baja. Ejemplo: 
        
        --Ejercicio 15--
        
        diasParejos: son días parejos si la dispersión es chica (menos de 30 cm)
        diasLocos: son días locos si la dispersión es grande (más de un metro)
        diasNormales, son días normales si no son ni parejos ni locos. 

        --Ejercicio 16--
        
        Definí la función pesoPino, recibe la altura de un pino en metros y devuelve su peso.
        Definí la función esPesoUtil, recibe un peso en kg y responde si un pino de ese peso le sirve a la fábrica
        Definí la función sirvePino, recibe la altura de un pino y responde si un pino de ese peso le sirve a la fábrica. 

    02 - Tipos de datos
        
        Eq: las cosas que se pueden comparar por distinto e igual (/= y ==). Casi todo en Haskell es comparable, salvo las funciones. ¡doble == even rompe!
        Ord las cosas que son comparables y además pueden ser ordenadas de menor a mayor, como los Int, Float, Char y String. Estos tipos pueden ser comparados mediante <, >, >=, etc.
        Show: las cosas que se pueden convertir en un string y mostrar en una consola, mediante la función show 

(01) - Clase 1 (Hacer una carpeta por clase)    
    
    (01) - Ejemplo.hs y Modulo 1 (word modulo 1)

        (0) Trabajando con HK podemos ingresar cuentas asi nomas y apretar enter o usar las funciones que vienen por default.
            /-\Ej: 2+3 luego apretar enter
            /-\ /not\ True
            /-\ /lenght\ [string]
            Los operadores puede usarse con notacion prefija (operador operando operando)
            /-\ Ej /(+)\ 2 5


        (1) 2 funciones como ejemplo:
            Las funciones de HK se definen en el archivo y para que funcionen tengo que poner el nombre de la funcion 
            y el valor que le ingreso.

            --1--
            doble numero = 4*numero (la funcion que estoy definiendo)
            para que funcione en HK tengo que escribir en la consola doble [entero] para la primera o esPositivo [entero]
            
            --2--
            (en el segundo ejemplo si quiero que funcione los negativos tengo que ponerlo entre parentesis)
        
        (2) Ejemplos del apunte de clase

            --1--
            Es igual al 1.2
            Tipado es la forma de escribir lo que hace la funcion y los datos que recibe
            El tipado de esa funcione es aproboAlumno :: int -> Bool

            --1.1--
            Se utiliza el comando :t para ver el tipo de lo que sea que le mande despues del espacio, 

            --2--
            Puedo asignar valores a una variable de forma comun y corriente.
             --podemos ver que si hago eso y hago un :t en edad el resultado es edadd :: Integrer
             --Edad en este caso es una variable no es una funcion ya que al no tener parametros no se puede aplicar.

            --3--
            De la misma forma que en 2 podemos hacer lo mismo con un char. para comparar podemos usar :t [char] y :segundoNombreDeHomero y va a dar lo mismo

            --4--
            Basica funcion como la de prueba, si pongo un valor lo divide por 40 para saber la cantidad de dolares que tengo.

            --5-- 
            El compilador siempre hace el chequeo que define si una funcion es valida o no. Si le saco el -- al archivo no me deja actualizar
            De la misma forma no funciona si defino -- la segunda opcion con doble, estoy dando una inicializacion que no es valida.
            A esto se le llama un chequeo estatico de tipos

            --6--
            Usando el max con esa estructura podemos comparar 2 variables del mismo tipo.
            Estas variables pueden ser int con int, o lo que sea siempre y cuando sean del mismo tipo.

            Consultar por que no funciona el max y por que si funciona el semaforo


    (02) - Modulo2

        --1--
        Esta es la funcion compuesta, esto significa que primero pasa por un doble y luego por el otro, por eso se genera el cuadruple al combinar uno con el otro

        --2-- 
        Asi creamos esta funcion que suma 2 a lo que le estoy pasando. Agrego nuevo la forma point free mediante Aplicacion Parcial

        --3--
        En esta se puede ver como funciona la cuenta que hace en dobleMasDos lo que pasa es que primero 
        se multiplica lo que le paso y despues toma lo que
        Vemos como  funciona la precedencia. Primero se hace lo de la derecha y despues lo de la derecha.
        Tambien nos damos cuenta que podemos simplificar la x y los parentesis a esto se le llama notacion point free
        Agregando point free le sacamos las funciones extras.

        --4--
        Ordenamos las 2 funciones de forma inversa para demostrar la importancia de la precedencia en HK. si lo invertimos 
        lo que pasa es que va a hacer primimero la suma y despues le agrega 2.

        --5--
        /even\ es una funcion que viene por default en HK y sirve para dar un booleano en caso que sea par o impar
        --Consultar por que no me funciona si le saco los parentesis.

        --6--
        TUPLAS: (ver mejor modulo 2 --6--)
        Tuplas son combinaciones de datos para que puedan ser utilizados en conjunto (nombre,edad)
        /snd\ Es una funcion que dada una tupla devuelve el segundo valor de la misma (edad en este caso) 
        puedo usar esa funcion para que se aplique pero es mejor declarar otra variable. 
        hacer snd (nombre, edad) = edad (nombre, edad) si vemos el tipo vemos como funciona jaja
        hasta ahora las tuplas pueden tener funciones o datos que siempre respetan la misma estructura.

        --7--
        Agregando una funcion que compare si una edad es mayor o menor que 18 y combinandola a la anterior 
        podemos obtener el resultado final, se le ingresa una tupla 

        --8-- Se ve mejor en el modulo 2 numero 9
        Puedo definir un tipo persona que tenga como parametros las variables como estan.
        luego darle valores como lo haria siempre. y hacer esMayorDeEdad laura y sale como resultado True
        Ahora persona es un tipo de dato (como si fuera una estructura, y puedo usarlo dentro de funciones y demas)

        --9--
        No tengo limite para crear tipos, las tuplas pueden ser de mas de 2
        --Por que me deberia funcionar el tema de type con 3 variables pero no me funciona. {todo lo que esta entre las llaves}

        --10--
        La funcion es menor edad primero calcula la edad de laura, despues se fija si es mayor de edad y si es mayor de edad la cambia, o biceversa.
        (hace todo desde la derecha a la izquierda)
      
        --11--
        /mod\: permite conocer el resto de la division de dos numeros.
        Se le tienen que pasar si o si 2 parametros.
        --En el apunte se pone a hacer cosas con funciones con un solo parametro que me parecio mas avanzado de lo que deberia.

        --12--
        funciones++:
        Podemos hacer funciones que le sumen un valor tipo c++ A esto se le llama aplicacion parcial


        --13--
        /head\: Esta funcion toma el primer elemento de una lista.
        Se crea una funcion que compara si la letra es una p. (totalemente inutil porque no hace falta jaja)
        
        --14--



(02) - Clase 2

    Primero voy a poner en 01 los apuntes y funciones que vayan a mostrar durante la clase.

    (01) Apuntes de clase
        Listado de palabras clave que tenemos que saber. Hay que saberlas!
        --1-- record sintax con formas de asociar distintos datos.
        Cuando defino uno con igual al otro pero con otro nombre
        En este caso fede siempre va a ser igual que leo pero con diferente nombre.
        Si aplico una funcion que cambia la fecha de cumpoleanos v a a hacer el cambio solamente en ese momento. deopues vuelve.
                                                                                        
        --Listas--

        /null\ Recibe como parametro una lista y responde si es igual a una lista vacia.
        
    (02) Modulo 3 - Listas Tuplas y datos definidos por el usuario

        -*- Listas
            --1--
            Para definir una lista se la nombre y se pone el contenido

            --2--
            Se puede tambien definir con 2 puntos para que se autocomplete.
            Pero solo lo pude hacer funcionar con 1 valor y oto que autocomplete con 3 se rompe. 
            si pongo un valor y que el resto se autocomplete se hace la diferencia y se va sumando 

            --3--
            Puede cuando lo hago por cotas puede ser ascendente o descendente

            --4--
            Definicion de cabeza y cola de la lista (ver apunte) //--Que onda con lo que se usa en parentesis es solo para escribir?
            /head\ Devuelve la cabeza de la lista
            /tail\ Devuelve la cola de la lista

            --5--
            Otras funciones que se puede utilizar:
            /length\ Devuelve la cantidad de elementos que tiene una lista
            /sum\ Suma los elementos de una lista de numeros
            /++\ Concatena dos Listas
            (x:xs) ++ (x:xs)
            /take\Toma los primeros n numeros de la lista
            take 3 (x:xs)
            /drop\ Devuelve la lista sin los primeros n numeros
            drop 3 (x:xs)
            /(!!)\ Devuelve el elemente que esta en la posicion n (0 es el primero)
            (x:xs) !! n
            /reverse\ Devuelve la lista con los elementos en orden inverso.
            reverse (x:xs)
        
        -*- Tuplas
            Las tuplas son combinaciones de datos los cuales no tienen por que ser del mismo tipo.
            Con las tuplas podemos usar el pattern matching que es utilizar el patron de las tuplas para hacer funciones (ejemplo --8--)
            
            --6--
            Para crearlas se hace el nombre de la tupla y los datos separados por comas.
            Se pueden hacer tuplas con lista adentro.
            Pueden tener como elementos otra tupla

            --7--
            Funciones que se aplican en las tuplas:
            /fst\ devuelve el primer valor de la tupla
            /snd\ devuelve el segundo valor de la tupla
            Estas 2 funciones solo sirven cuando son tuplas de 2 elementos.

            --8--
            usando pattern matching lo que hago es ignorar a travez del _ el primer valor y la funcion lo que hace es devolver el segundo valor.
            entonces le ingreso una tupla de 2 elementos y devuelve solo el segundo.
            lo mismo puedo aplicarlo para tuplas de 3 o n elementos.

            --9-- Sinonimos de tipo --Volver a revisar el tema de asdf :: dsf -> asdf ->
         
            Cuando creo un type creo lo que se llama sinonimo de tipo, que es una estructura de la cual se basan las tuplas de este tipo.
            Cuando defino el tipado de la funcion de donde a donde va

            --10--
            /min\ funcion que devuelve el numero menor entre 2 valores que se le dan.

            --11-- Tipos propios (Data)
            Para los casos que queremos modelar diferentes tipos que son todos iguales.
            Este caso se lee como el tipo de dato Persona utiliza el constructor de nombre Persona (del lado derecho del =) que recibe un string y un int
            Esta forma es impractica porque en la consola trngo que ingresar estos datos entre parentesis para que funcione.

            --12-- Pattern matching sobre Data
            Para hacer pattern matching sobre data hay que definir funciones similar a lo que haciamos con tuplas
            nombre y edad son 2 funciones que lo que hacen es pattern matching para que devuelvan los valores buscados.

            --13-- Diferencias entre data y tupla
            La tupla es menos intuitiva, y es mas una solucion general, tiene que ser conocida por quien la usa
            La estructura de datos por el contrario es mas expresiva con lo qeu se puede hacer

            --14-- Acomplamiento en Data
            Volvemos a la funcion de si es mayor de edad

            --15-- Record syntax con Data
            Vemos como se complica a medida que se hace mas grande el data.
            para definir un dato se hace aun mas inexpresivo

            --16--
            Forma correcta de definir un dato ahora no solo que es expresivo con lo que hago sino que tambien cuando defino
            a una persona puedo incluso alterar el orden (como se puede ver en edadOk y telefonoOk)
            Con este tipo de dato no hace falta definir funciones del tipo pattern matching, ya es omplicito lo que estoy buscando

            --17--
            Para que un dato se pueda mostrar correctamente al ser llamdo tenemos que poner al final de la definicion del dato deriving (Show)

            --18-- Multiples constructores
            Sexo tiene 2 constructores masculino y femenino ambos sin parametros

            --19-- Ejemplo de Remiseria con multiples contructores

            Una flota es una lista de vehiculos

            --20-- Ejercicio de modelar alumnos y parcial

                --20.x -- Cambiar hijo del rigor a un alumno.
                --20.X1 -- Saber si un alummn va a estudiar



(03) - Clase 3 Recursividad y evaluacion diferida
    (01) - Apuntes de clase
        Apuntes tomados en el mismo archivo

    (02) - Modulo 4

        --1--
        Factorial de un numero con guardas

        --2--
        Factorial de un numero con pattern matching

        --3--
        Secuencia de Fibonacci

        --4--
        Saber si un numero es primo con guardas

        --5--
        Como funcionan las 3 funciones si las programara yo. Son ejemplos no funciones.
        Listas en forma recursiva / /sum\ como recursivo / /last\ como recursivo / /take:\ / /drop\

        --6--
        Aplicacion Parcial: significa que solo se aplica y evalua lo que necesita para funcionar

(04) - Clase 4
    
    (01) - Apuntes de clase 4.hs
        --1--
        Problema de que viene un tipo que me debe 10kpesos y tengo data cliente...

        --2--
        armar un listado de deudores

        --3--
        Saber si es palindromo

        --4--
        Listado de clientes palindromos

        --5--
        Hacer un filtro cabeza cola que recibe cualquier lista de cualquier tipo de a siempre y cuando reciba cualquier tipo.

        --6-- 

        definimos la funcion de 5

        --7--
        Resolvemos 2 con lo que aprendimos de 6

        --8--

        Resolvemos 4 con filter

        --9--
        Dada una deuda de clietnes nos de la deuda de cada uno de los clientes

        --10--
        Deuda total 

        --11--
        Saber si todos tienen nombre palindromo
        
        --12--
        definido el any

    (02) - Modulo 5
        
        --1--
        Clientes que nos deben más de X

        --2--
        Clientes con nombre palíndromo

        --3--
        Clientes con alguna factura de X

        --4--
        Las 3 funciones de 1,2 y 3 en comun que son recursivas y reciben una funcion con una lista y devuelven un bool por cada elemento de la lista.
        Es por eso que al ser una estructura que se repite puedo generar una funcion que haga eso
        Tipado de filter: No hace falta hacerlo en cada programa que haga porque ya viene por default en Haskell.
        Para ver que funciona poner : filter (elem 500000 . facturas) clientes en el main que filtra facturas

        Con esta funcion podemos hacer las 3 funciones con una linea de codigo haciendo en el main:
            1) >filter ((> plata) . deuda)  (siendo plata el monto a del listado)
            2) >filter (palindromo . nombre) clientes
            3) >filter (elem 500000 . facturas) clientes


        --5--
        Tambien lo podemos usar simplemente con una funcion y una lista que armemos nosotros.
        filter palindromo ["neuquen", "salta", "anana"] en el main

        --6--
        map transforma una lista en otra aplicando una funcion a todos sus elementos
        Ej: >map (* 2) [1..5]  Multiplica por dos todos los valores y devuelve una lista de valores multiplicados

        > map (+) [1..5]        Esto es importante porque es una lista de funciones.

        --6.1-- Hacer la misma funcion pero sin map
        hacer en main > (head . sumarDesde 3) 2 

        

        --7--
        Convertir cadena de caracteres a mayuscula

        --8--
        Sumar palabras dice la cantidad total de caracteres que tiene la combinacion de las palabras

        --9--

        /any\ nos dice si todos los elementos de una lista cumplen determinada cosa que yo le mande 
        
        >all even [1..3]

        >any (elem 3) [ [6..9], [2..4] ]

        >and [True, True]

        >or [True, False, False]
Practico clase: Trabajo de Jurassic Park.
18-5-19: 43:00 resolucion de esOmivoro ESTUDIARLA BIEN
esOmnivoro = (not . null . filter esHerbivoro . filter esCarnivoro . flip (:)) []
esOmnivoro = flip all [esHerbivoro,esCarnivoro] .flip ($) como funciona 55:00


(05) - Clase 5

    (01) - Apuntes de Clase


        --1-- 
        Teniendo una lista, puedo usar fold para poder tener asociatividad dependiendo de lo que necesite voy a asociad de derecha a izquierda.
     ((1*2)*7)*5 = 1*(2*(7*5))

        Tipado de foldl1 y foldr1 Fold tiene que tener aunque sea 1 elemendto

        --2--
        como seria la funcion sum y prod

        --3--
        foldl y foldr

        --4--

        --5--
        Queremos definir foldr para listas infinitas va bien. evalua en cada caso la semilla con la otra

        foldl se cuelga para listas infinitas, este lo que hace deja la evaluacon para el final guardando todos los casos a ser eveluados despues.

        --6--
        Parte 2 del ejercicio de Jurassic Park


        --N--    Se agregan puntos al ejercicio dinosaurios de la clase pasada.


    (02) - Modulo 5.2 

        --1--
        fold intercala funciones con un listado "cambiando" tecnicamente la , por la funcion que le estoy mandando

        > foldl1 (+) lista
        > foldr1 (+) lista
        En este caso particular da lo mismo porque la suma es conmutativa. sino
        Varias funciones usan un fold adentro. Ej: sum, product, concat, 

        - en el caso de que no sean conmutativas no da lo mismo si aplicamos uno u el otro
        > foldl1 (/) [1,2,3,4,5]
        > foldr1 (/) [1,2,3,4,5]

        --2-- Revisar otra vez por que pasa esto de la semilla
        La semilla hace que funcione mejor el fold ya que le agrega un valor inicial a la operacion que le estoy mandando.
        
        >funcion lista.

        --3-- Funcion guerrero (Escuchar audio)

        --4--
        también podemos componer una lista de funciones con el operador (.). En ese caso, fold termina devolviendo una función que puede aplicarse contra un valor:

            > foldr (.) (1 +) [(^ 2), (4 *)]
            <function>

            > (foldr (.) (1 +) [(^ 2), (4 *)]) 0
            16
        
        --5--
        Definicion del flip
        flip f y x = f x y


        


(06) - Clase 6
    (01) - Apunte de Clase  
            --1-- Claculo Lamda λ

            IMPORTANTE PARA EL TP 1.12.00

            --2--PARTE 2 currificacion permite poder darle valores a la tupla

            (+) :: Int -> (Int -> Int)
            \ x y -> x + y

            \x -> \y -> x + y significa que no recibo dos cosas es que recibo una operacion que 

            Cual el tipo de map con currificacion? 

            map :: (a -> b) -> [a] -> [b]

            y b :: (c->d)


    (02) - Modulo 6
            
            --1--

(07) - Clase 7
    (01) - Apunte de Clase


    (02) - Modulo 7

        --1--
        InterseccionFiltra los elementos de una lista.

        --2-- Funcion $ de como funciona.

        --3-- recorrido de herraminetas que estuvimos usando 1:00:00
        Que tipos conocemos?  

        Int, Char, Bool, Float

        String, Lista, Tupla, Data

        Funciones.

        type Nombre = String
        
        type Entrenador = Soldado -> Soldado

        Tipos genericos que aplican a cosas genericas: Head, last tail (reciben listas de elementos pero sin restricciones) sin mencionar tipos de datos manipulados.
        head :: [a] -> a            id :: a -> a (este funciona para todo)
        last :: [a] -> a
        tail :: [a] -> [a]

        Nunca interactura con el elemento en si, no sabe lo que es. Puede ser agnostico

        $ tambien es un polimorfismo.

        Orden superior tambien son polmorfismos, reciben algo que no importa y devuelven algo, lo vemos en el map con bool, 
        Me da igual el tipo de parametro que recibo, yo doy un tipo de resultado.

        --4--

        La suma recibe dos enteros o Float
        4+5 Int -> Int -> Int
        4.1+5 Float -> Int -> Float
        4.1+5.2 Float -> Float -> Float

        No puedo pensar en polimorfismo cuando tengo restricciones pero podemos agrupar las restricciones, son todos numeros.
        Para que esto pase se necesita el concepto de Type clases.
        Actua como obligaor de tipos para que funcionen con las mismas propiedades. y pueden tener una misma forma. Tengo algo que si quiero que sea num tengo que definir propiedades.
        Existe un conjunto de operaciones que se pueden implementar.

        --5-- 1:20:00

        comparaciones entre elementos cuando son distintos tipos
        4>3 (si un numero es mayor que el otro)
        "Mati" < "Leo" (si la M es mayor que la L) entocnes es falso
        True > False (La verdad le gana a la mentira)

        Tipo Ord son ordenables porque son cosas que se pueden ordenar: 

        Puedo preguntar si 2 elementos son iguales o distintos:

        (==):: Eq a => a-> a-> Bool
        (/=):: a-> a-> Bool

        elem :: Eq a => a -> [a] -> Bool

        cuando veo foldable t tengo que pensarlo como una lista de 
        
        --4-- Tipado de maximoSegun
        La y es la unica que necesita restriccion por eso es Ord, como todo lo demas no importa lo que sea lo puedo dejar asin identificar.
        maximoSegun :: Ord => (x->y) -> x -> x -> x

        --5-- 
        4.1+5
        4+"q"
        
        Puedo tener numeros, decimales o tner mezcla, en el caso de ser tipado fuerte no se pueden mezclar tipos no compatibles, HK tiene un tipado fuerte por lo cual no puedo hacer esa comparacion.
        Esto es lo que hace a Haskell como tipado fuerte.

        chequeo de tpos: estatico y dinamico: segun en que momento se fija de que tipo son los argumentos y si son validdos.  Dinamico antes de evaluar pasa por todas las definiciones para ver si hay errores de tipos tan pronto como esta disponible (estatico) 

        --6-- Lenguajes funcionales 1:55: volver a escuchar poruqe se acabo la carga.

        tal comolas funciones aplican sobre varios tipos puede que entre en polimorfismo Ad-Hoc, no funciona para todo sino para un conjuto de datos.
        id sirve para cualquier a, los a ordenables, los a

        --7-- Ejemplo de dinosaurios en Ejemplo de jurasi Park 2:00:00

        parte uno por que no esta el show en el problema de deriving show
        Si agrego show te digo que la estructura que le agrego es del tipo show.
        si le agrego eq lo que hace es decir que es del tipo eq hace que se cuente para hacer el cambio.
        instance eq Dino, hay algo que es instance de eq que es dino. no quiero que compare todo, quiero yo poder definirlo por afuera
        
        --PRACTICA DE INFERENCIA DE TIPOS--

        --a--

        watever a b c = c a . filter ((a==) . b )

        primer parametro de filtes siempre es h -> bool

        3 parametros 3 flechas? -> -> -> El total es una coposicion por lo cual serian 4 flechas (la composicion recibe una funcion)  -> -> -> ( -> ) y por currificacion  -> -> -> ->
        ->(b es una fucnion de un solo parametro) -> (esto es lo que seria c a) -> ( el resultado )

            x -> ( y -> x ) -> ( x -> [y] -> z) -> ([y] ->   z  )
            x -> ( y -> x ) -> ( x -> [y] -> z) -> [y] ->   z   Puedo sacar los parentesis para que este currificada.

        --b--

        funcionLoca a f m b =  (m <) . head . map (uncurry b) $ zip a f el signo $ hace que toda la composicion se aplique al resultado de zip. (zip arma una lsta de tuplas.)
                                                                [(y,z)]

        4 parametros 4 flechas: -> -> -> -> 
        a y f tendrian que ser listas [] -> [] -> -> ->
        Tiene que ser ordenable ORD x [] -> [] -> x -> ->
        B tiene que ser una funcion (4 parametro) de 2 parametros: [] -> [] -> -> ( -> -> ) ->
       24:00
        map va a devolver una cabeza de : [y] -> [z] -> -> (y (viene del zip) -> z -> x ) -> Bool (el resultado es el resultado de la comparacion)
        
        --c--
        
        saraza x y w z = z w . maximoSegun z y $x

        maximoSegun f x y 
            |f x y < f y x = x
            |otherwise = y

        maximoSegun :: Ord b => (a -> a -> b) -> a -> a -> a

        son 4 parametros porque la conmposicion esta aplicada a x :  -> -> ->  ->
        z es una funcion que recibe 3 parametros:  -> -> -> ( -> -> -> ) ->
        tanto y como x necesitan parametros del mismo tipo:  a -> a -> -> ( a -> a -> ) ->
        la funcion z deberia devolver un odenable, porque la funcion maximo segun tiene que ser ordenable: ord b =>  a -> a -> -> ( a -> a -> b) ->
        w tiene que ser a porque es parametro de z: ord b =>  a -> a -> a -> ( a -> a -> b) ->
        Todo devuelve lo que devuelve z por ser el parametro de una ultima fucnion: ord b =>  a -> a -> a -> ( a -> a -> b) -> b

        --d--

        h x y z q
            |any x z = y > (head . filter x) z
            | otherwise = q

        h:: -> -> -> ->
        h:: -> -> -> ->
        x devuelve un booleano que recibe alfo del mismo tipo de la lista        h:: (a  -> Bool) -> -> [a] -> Bool -> Bool
        40:00        h:: Ord a (a  -> Bool) -> a -> [a] -> Bool -> Bool